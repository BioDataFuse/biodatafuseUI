from pathlib import Path
from pyBiodatafuse.graph import cytoscape
from pyBiodatafuse.graph import saver

import pandas as pd
from py4cytoscape import cytoscape_ping


from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from .. import models


class CytoscapeService:
    def __init__(self, db: AsyncSession):
        self.db = db


    async def load_graph_into_cytoscape(
        self,
        annotations: models.Annotation,
        graph_dir: Path,
    ):

        try:
            if cytoscape_ping() != "You are connected to Cytoscape!":
                return {
                    "success": False,
                    "message": "Cytoscape is not running or REST API is unreachable. Please ensure Cytoscape desktop is open."
                }

            combined_df = pd.DataFrame(annotations.combined_df).T
            print(combined_df.columns.tolist())
            combined_metadata = annotations.combined_metadata
            opentargets_df = (
                pd.DataFrame(annotations.opentargets_df).T
                if annotations.opentargets_df
                else None
            )
            # Save the graph to disk using your existing saver
            pygraph = saver.save_graph(
                combined_df=combined_df,
                combined_metadata=combined_metadata,
                graph_name=f"graph_{annotations.identifier_set_id}",
                disease_compound=opentargets_df,
                graph_dir=graph_dir,
            )
            if pygraph.number_of_edges() == 0:
                return {
                    "success": False,
                    "message": "Graph generation succeeded, but it contains no edges. Please check your data for valid connections."
                }

            # Load graph in Cytoscape using your internal cytoscape module
            cytoscape.load_graph(pygraph, network_name=f"userInput_{annotations.identifier_set_id}")

            return {"success": True, "message": f"Graph loaded into Cytoscape as 'userInput_{annotations.identifier_set_id}'."}

        except Exception as e:
            return {"success": False, "message": f"Error loading graph into Cytoscape: {str(e)}"}
        
    
    # async def create_pygraph(
    #     self,
    #     combined_df: pd.DataFrame,
    #     combined_metadata: List[dict],
    #     disease_compound: Optional[pd.DataFrame] = None,
    # ) -> Tuple[nx.MultiDiGraph, Dict]:

    #     try:
    #         # Capture any warnings generated by the pyBiodatafuse package function call
    #         with warnings.catch_warnings(record=True) as caught_warnings:
    #             warnings.simplefilter("always")

    #             pygraph = saver.save_graph(
    #                 combined_df=combined_df,
    #                 combined_metadata=combined_metadata,
    #                 disease_compound=disease_compound,
    #                 )

    #         warning_messages = [str(w.message) for w in caught_warnings]
    #         if warning_messages:
    #             print(f"Warnings captured: {warning_messages}")

    #         return pygraph, warning_messages            
            
    #     except Exception as e:
    #         raise ValueError(f"Error creating pygraph: {str(e)}")

